11111010000000
1111101000000011111111
11111010000000111111111111111111111111111111
11111010000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111

111110100000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111010000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111101000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111010000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
111110100000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111101000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111010000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
Inf
Inf-1
Inf-Inf
Inf-1000000000000000000000000000000000000000000000000000000000000000
iris
lm(Petal.Width ~ ., iris)
lm(Petal.Width ~ Sepal.Length + Sepal.Width, iris)
myModel<-lm(Petal.Width ~ Sepal.Length + Sepal.Width, iris)
myModel
predict(lm, c(1 ,1))
predict(myModel, as.matrix(c(1, 1)))
predict(myModel, as.data.frame(c(1, 1)))
predict(myModel, data.frame(Sepal.Length=1, Sepal.Width=1))
predict(myModel, data.frame(Sepal.Length=5, Sepal.Width=5))
predict(myModel, data.frame(Sepal.Length=5, Sepal.Width=3))
predict(myModel, data.frame(Sepal.Length=5, Sepal.Width=2))
predict(myModel, data.frame(Sepal.Length=500, Sepal.Width=200))
predict(myModel, data.frame(Sepal.Length=5, Sepal.Width=2))
myModel
summary(myModel)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
accidentData<-fread("data/Accident_Information.csv")
accidentData<-accidentData[InScotland=="Yes"]
vehicleData<-fread("data/Vehicle_Information.csv")
View(accidentData)
sum(which(!(accidentData$Accident_Index %in% vehicleData$Accident_Index)))
(which(!(accidentData$Accident_Index %in% vehicleData$Accident_Index)))
length(which(!(accidentData$Accident_Index %in% vehicleData$Accident_Index)))
length(which(!(vehicleData$Accident_Index %in% accidentData$Accident_Index)))
setkey(accidentData, Accident_Index)
setkey(vehicleData, Accident_Index)
merged<-merge(accidentData, vehicleData, all.x = TRUE)
length(unique(merged$Accident_Index))
View(merged)
View(merged)
accidentData<-read.csv("data/Accident_Information.csv")%>%filter(InScotland=="Yes")
vehicleData<-read.csv("data/Vehicle_Information.csv")
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")
View(accidentData)
View(vehicleData)
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")%>%
group_by(Accident_Index)%>%
mutate(allMakes=c(make))
View(merged)
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")%>%
group_by(Accident_Index)%>%
mutate(allMakes=paste(make))
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")%>%
group_by(Accident_Index)%>%
summarise(allMakes=paste(make))
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")%>%
group_by(Accident_Index)%>%
mutate(allMakes=paste0(make, collapse = ""))
View(merged)
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")%>%
group_by(Accident_Index)%>%
mutate(allMakes=paste0(make, collapse = ""))%>%
distinct(Accident_Index)
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")%>%
group_by(Accident_Index)%>%
mutate(allMakes=paste0(make, collapse = ""))
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")%>%
group_by(Accident_Index)%>%
mutate(makes=paste0(make, collapse = ""))%>%
select(Accident_Index, Accident_Severity, Date, Light_Conditions, Number_of_Vehicles,
Longitude, Latitude, Road_Surface_Conditions, Speed_limit, Weather_Conditions, makes)
View(merged)
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")%>%
group_by(Accident_Index)%>%
mutate(makes=paste0(make, collapse = ""))
table(merged$Local_Authority_.District.)
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")%>%
group_by(Accident_Index)%>%
mutate(makes=paste0(make, collapse = ""))%>%
select(Accident_Index, Accident_Severity, Date, Light_Conditions, Number_of_Vehicles,
Longitude, Latitude, Road_Surface_Conditions, Speed_limit, Weather_Conditions, makes,
Local_Authority_.District.)
View(merged)
merged<-distinct(merged, Accident_Index)
library("dbplyr", lib.loc="~/R/win-library/3.5")
install.packages("dplyr")
merged<-accidentData%>%left_join(vehicleData, by="Accident_Index")%>%
group_by(Accident_Index)%>%
mutate(makes=paste0(make, collapse = ""))%>%
select(Accident_Index, Accident_Severity, Date, Light_Conditions, Number_of_Vehicles,
Longitude, Latitude, Road_Surface_Conditions, Speed_limit, Weather_Conditions, makes,
Local_Authority_.District.)
library(dplyr)
install.packages("dplyr")
shiny::runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
